#!/bin/bash

set -x;

# Define color variables
RED='\033[0;31m'     # Red
GREEN='\033[0;32m'   # Green
YELLOW='\033[0;33m'  # Yellow
BLUE='\033[0;34m'    # Blue
PURPLE='\033[0;35m'  # Purple
CYAN='\033[0;36m'    # Cyan
WHITE='\033[0;37m'   # White
BOLD_WHITE='\033[1;37m'  # White
NC='\033[0m' # No Color

# Description: This script is intended for pushing or deploying a specified version of the project.
#              It checks for the required version name argument, sets up necessary environment variables,
#              and performs deployment operations.
# Usage: ./deploy.sh <branch> <build_name>
#        <branch> name of the branch to be checked out
#        <build_name> is the name of the build/tag to be deployed

export SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

title1 () {
  width=$(tput cols 2>/dev/null)

  if [ $? -ne 0 ]; then
      width=30
  fi

  line=$(printf "%${width}s" | tr ' ' '=')
  echo -e "\n${CYAN}$1${NC}"
  echo -e "${CYAN}$line${NC}"
}

title2 () {
  echo -e "${BOLD_WHITE}$1${NC}"
}


cleanup() {
    if [ -n "$SSH_PID" ]; then
      echo "Killing SSH tunnel with PID $SSH_PID"
      kill ${SSH_PID}
    fi

    if [ -d "$BUILD_DIR" ]; then
      echo "Clean up build dir ($VERSION)..."
      [ ! -z "$BUILD_VERSION" ] && [ -d "$BUILD_DIR" ] && rm -rf "$BUILD_DIR" || :
    fi

    if [ "$(docker image ls | grep "localhost:5000")" ]; then
        echo "Clean up images..."
        docker image ls | grep "localhost:5000" | awk '{print $3}' | xargs docker rmi -f
    fi
}

check_command() {
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: $1 failed!${NC}"
        exit 1
    fi
}

trap cleanup EXIT

# Exit on missing argument
if [ -z "$1" ]; then
    echo -e "${RED}Error: Branch name is missing!${NC}"
    exit 1
fi

# Exit on missing argument
if [ -z "$2" ]; then
    echo -e "${RED}Error: Build name is missing!${NC}"
    exit 1
fi

# ENVIRONMENT VARS
export ROOT="$(pwd)"
[ -f $ROOT/.env ] && (set -o allexport; source $ROOT/.env; set +o allexport)
[ -f $ROOT/.env.local ] && (set -o allexport; source $ROOT/.env.local; set +o allexport)

. /etc/profile

STAGING_USER=$(echo $STAGING_SSH_DSN | cut -d'@' -f1)
STAGING_HOST=$(echo $STAGING_SSH_DSN | cut -d'@' -f2 | cut -d':' -f1)
STAGING_PORT=$(echo $STAGING_SSH_DSN | cut -d':' -f2)

BUILD_ROOT=/app/build
BRANCH=$1
BUILD_VERSION=$2
export VERSION=$BRANCH\_$BUILD_VERSION
BUILD_DIR=$BUILD_ROOT/$VERSION
MAKEFILE=${MAKE_FILE:-Makefile.cicd}
STAGING_URL="${STAGING_USER}@staging"
SSH_TUNNEL="-L 5000:registry:5000 $STAGING_URL"

title1 "Staging $VERSION to staging..."
title2 "Makefile: $MAKEFILE"
title2 "Branch name: $BRANCH"
title2 "Build name: $BUILD_VERSION"
title2 "Build directory: $BUILD_DIR"

# Remove build dir (if exists from previous failed run)
[ ! -z "$BUILD_VERSION" ] && [ -d "$BUILD_DIR" ] && rm -rf "$BUILD_DIR" || :

title2 "\nCloning $GIT_REPO ..."
git clone --depth=1 $GIT_REPO --branch="$BRANCH" "$BUILD_DIR"

if [ ! -d "$BUILD_DIR" ]; then
    echo -e "${BOLD_WHITE}Error: Directory $BUILD_DIR does not exist.${NC}"
    exit 1
fi

if [ -d "/var/docker_cicd/env" ]; then
  if [ "$(ls -A /var/docker_cicd/env)" ]; then
    echo "Copying environment files ...";
    cp -R /var/docker_cicd/env/. "$BUILD_DIR";
  fi
fi

cd $BUILD_DIR;

ssh-keyscan staging >> /home/cicd/.ssh/known_hosts

title1 "Creating registry tunnel ..."
echo "ssh $SSH_TUNNEL -N -f"

ssh $SSH_TUNNEL -N -f
check_command "Creating SSH tunnel"

SSH_PID=$(pgrep -f "ssh $SSH_TUNNEL")

title1 "Ready to stage ..."

docker system prune -f;

if [ -f "$MAKEFILE" ]; then
    title2 "Makefile found! Using it ..."

    echo "Installing ($BUILD_VERSION@$BRANCH) ..."
    make -f ${MAKEFILE} install VERSION=$BUILD_VERSION
    check_command "Make install"

    echo "Build containers ($BUILD_VERSION@$BRANCH) ..."
    make -f ${MAKEFILE} build VERSION=$BUILD_VERSION
    check_command "Make build"

    echo "Running test ($BUILD_VERSION@$BRANCH) ..."
    make -f ${MAKEFILE} test VERSION=$BUILD_VERSION
    check_command "Make test"

    echo "Pushing/saving containers ($BUILD_VERSION@$BRANCH) ..."
    make -f ${MAKEFILE} push VERSION=$BUILD_VERSION
    check_command "Make push"

else
    title2 "No Makefile found! Using docker compose ..."

    export VERSION=$BUILD_VERSION

    docker compose build
    check_command "Docker compose build"

    docker compose --profile=test run --remove-orphans --rm tests;
    check_command "Docker compose build (install profile)"

    docker compose push --quiet
    check_command "Docker compose push"

    docker compose --profile=test down;
fi

title1 "Finished! Cleaning up..."