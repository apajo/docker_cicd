#!/bin/bash

# Description: This script is intended for pushing or deploying a specified version of the project.
#              It checks for the required version name argument, sets up necessary environment variables,
#              and performs deployment operations.
# Usage: ./deploy.sh <branch> <build_name>
#        <branch> name of the branch to be checked out
#        <build_name> is the name of the build/tag to be deployed

export SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

cleanup_ssh() {
    if [ -n "$SSH_PID" ]; then
        echo "Killing SSH tunnel with PID $SSH_PID"
        kill ${SSH_PID}
    fi
}

# Exit on missing argument
if [ -z "$1" ]; then
    echo -e "${RED}Error: Build name is missing!${NC}"
    exit 1
fi

# ENVIRONEMTN VARS
export ROOT="$(pwd)"
[ ! -f $ROOT/.env ] || set -o allexport; source $ROOT/.env; set +o allexport;
[ ! -f $ROOT/.env.local ] || set -o allexport; source $ROOT/.env.local; set +o allexport;

. /etc/profile

APP_ROOT=/app;
BRANCH=$1;
VERSION=$2;
MAKEFILE=${MAKE_FILE:-Makefile.cicd}
STAGING_URL="${STAGING_USER}@staging"
SSH_TUNNEL="-L 5000:registry:5000 $STAGING_URL"


echo "Cloning ($GIT_REPO) ..."
git clone ${GIT_REPO} --branch=${BRANCH} ${APP_ROOT} || :;

cd ${APP_ROOT} || exit;
git fetch --all  && git upll --all;

function cleanup()
{
  if [ "$(docker image ls | grep "localhost:5000")" ]; then
    echo "Clean up images..."
    docker image ls | grep "localhost:5000" | awk '{print $3}' | xargs docker rmi -f;
  fi

}

trap cleanup_ssh EXIT
trap cleanup EXIT

if [ ! -f "$MAKEFILE" ]; then
    echo -e "${RED}Makefile not found: $MAKEFILE (in: $APP_ROOT)${NC}"
    exit 1
fi


echo -e "\n${GREEN}Creating staging tunnel ...${NC}\n"
echo "ssh $SSH_TUNNEL -N -f"

ssh $SSH_TUNNEL -N -f
if [ ! $? -eq 0 ]; then
 echo -e "${RED}Failed to create SSH tunnel.${NC}"
 exit 1
fi

SSH_PID=$(pgrep -f "ssh $SSH_TUNNEL")

echo "Pulling/loading containers ($VERSION) ..."
make -f ${MAKE_FILE:-Makefile.cicd} deploy VERSION=$VERSION

echo -e "\n${GREEN}Finished! ${NC}\n"