#!/bin/bash

set -e;
set -x;

# Define color variables
RED='\033[0;31m'     # Red
GREEN='\033[0;32m'   # Green
YELLOW='\033[0;33m'  # Yellow
BLUE='\033[0;34m'    # Blue
PURPLE='\033[0;35m'  # Purple
CYAN='\033[0;36m'    # Cyan
WHITE='\033[0;37m'   # White
BOLD_WHITE='\033[1;37m'  # White
NC='\033[0m' # No Color

# Description: This script is intended for pushing or deploying a specified version of the project.
#              It checks for the required version name argument, sets up necessary environment variables,
#              and performs deployment operations.
# Usage: ./deploy.sh <branch> <build_name>
#        <branch> name of the branch to be checked out
#        <build_name> is the name of the build/tag to be deployed

export SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"


title1 () {
  width=$(tput cols 2>/dev/null)

  if [ $? -ne 0 ]; then
      width=30
  fi

  line=$(printf "%${width}s" | tr ' ' '=')
  echo -e "\n${CYAN}$1${NC}"
  echo -e "${CYAN}$line${NC}"
}

title2 () {
  echo -e "${BOLD_WHITE}$1${NC}"
}

check_command() {
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: $1 failed!${NC}"
        exit 1
    fi
}

# Exit on missing argument
if [ -z "$1" ]; then
    echo -e "${RED}Error: Branch name is missing!${NC}"
    exit 1
fi

# Exit on missing argument
if [ -z "$2" ]; then
    echo -e "${RED}Error: Build name is missing!${NC}"
    exit 1
fi


# ENVIRONEMTN VARS
export ROOT="$(pwd)"
[ -f $ROOT/.env ] && (set -o allexport; source $ROOT/.env; set +o allexport);
[ -f $ROOT/.env.local ] && (set -o allexport; source $ROOT/.env.local; set +o allexport);

. /etc/profile

STAGING_USER=$(echo $STAGING_SSH_DSN | cut -d'@' -f1)
STAGING_HOST=$(echo $STAGING_SSH_DSN | cut -d'@' -f2 | cut -d':' -f1)
STAGING_PORT=$(echo $STAGING_SSH_DSN | cut -d':' -f2)

APP_ROOT=/app;
BRANCH=$1;
VERSION=$2;
MAKEFILE=${MAKE_FILE:-Makefile.cicd}
STAGING_URL="${STAGING_USER}@${STAGING_HOST} -p ${STAGING_PORT}"
SSH_TUNNEL="-L 5000:registry:5000 $STAGING_URL"

function cleanup()
{
  if [ -n "$SSH_PID" ]; then
    echo "Killing SSH tunnel with PID $SSH_PID"
    kill ${SSH_PID}
  fi

  if [ "$(docker image ls | grep "localhost:5000")" ]; then
    echo "Clean up images..."
    docker image ls | grep "localhost:5000" | awk '{print $3}' | xargs docker rmi -f;
  fi
}

trap cleanup EXIT

title1 "Deploying $VERSION ($GIT_REPO) to staging..."
git clone --depth=1 ${GIT_REPO} --branch=${BRANCH} ${APP_ROOT} || :;
check_command "Repository cloning"

cd ${APP_ROOT} || exit;
git fetch --all && git pull --ff;
check_command "Repository cloning"

# Check if the git commands were successful
if [ $? -eq 0 ]; then
  if [ -d "/var/docker_cicd/env" ]; then
    if [ "$(ls -A /var/docker_cicd/env)" ]; then
      echo "Copying environment files ...";
      cp -R /var/docker_cicd/env/. "$APP_ROOT";
    fi
  fi
fi

if [ ! -f "$MAKEFILE" ]; then
    echo -e "${RED}Makefile not found: $MAKEFILE (in: $APP_ROOT)${NC}"
    exit 1
fi

title1 "Creating registry tunnel ..."
title2 "ssh $SSH_TUNNEL -N -f"

ssh $SSH_TUNNEL -N -f
check_command "SSH tunnel"

SSH_PID=$(pgrep -f "ssh $SSH_TUNNEL")

title1 "Ready to deploy ($VERSION) ..."

if [ -f "$MAKEFILE" ]; then
  title2 "Makefile found! Using it ..."

  make -f ${MAKE_FILE:-Makefile.cicd} deploy VERSION=$VERSION
  check_command "Make deploy"
else
  title2 "Runnig docker compose commands..."

	docker compose pull --quiet
  check_command "Docker pull"

	docker compose up --no-build -d
  check_command "Dockre up"

fi

title1 "Finished! Cleaning up..."